@using Entities.Domain
@using Microsoft.Ajax.Utilities
@using Service.Common
@using Service.Departments
@using Service.Interface


@model Web.Models.Packing.MeetModel
@{
    ViewBag.Title = "Making Department DDS";
    Layout = "~/Views/Shared/_KendoUILayout.cshtml";
    var dmsCodes = Model.ListMeetingResultModel.Select(t => t.DmsCode).Distinct().ToList();
    var listResults = new List<Web.Models.Packing.LineResult>();
    var listLineName = new List<string>();
    foreach (var result in Model.ListMeetingResultModel.Select(t => t.ListResult))
    {
        listResults.AddRange(result);
        listLineName.AddRange(result.Select(lineResult => lineResult.LineName));
    }
    listResults = listResults.DistinctBy(x => x.LineCode).Where(p => p.LineCode != "DeedmacOperation").ToList();
    listLineName = listLineName.Where(p => p != "DeedmacOperation").Distinct().ToList();
    var _dmsService = DependencyResolver.Current.GetService<IDmsService>();
    var _report = DependencyResolver.Current.GetService<IReportService>();
   
}


@if (listResults.Count > 0)
{
    <div class="form-group">

        <div class="pull-right" style="padding-right:0; margin-bottom:5px">
            <input id="datepicker"  class="datepicker-fullscreen" style="width: 150px;" />
        </div>
        
    </div>
    <div class="row">
        <div class="col-md-12">
            <!-- BOX -->
            <div class="box border blue">
                <div class="box-title">
                    <h4><i class="fa fa-user"></i><span class="hidden-inline-mobile">  </span></h4>
                </div>
                <div class="box-body">


                    <div class="tabbable header-tabs">
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#tabresult" data-toggle="tab"><i class="fa fa-question"></i> <span class="hidden-inline-mobile">Result daily </span></a></li>

                        </ul>
                        <div class="tab-content">
                            <!-- Result -->
                            <div class="tab-pane fade in active" id="tabresult">

                                <div class="box border orange">

                                    <table class="table">
                                        <thead>
                                            <tr>
                                               <th>DMS</th>
                                                <th>IP/OP</th>
                                                <th>Measure</th>
                                                <th>Owner</th>
                                                <th>Target</th>
                                                <th>Unit</th>
                                               @foreach (var str in listResults)
                                               {
                                                   var linec = str.LineCode.Replace("(", "").Replace(")", "");
                                                   LineHardCodeType lc;
                                                   Enum.TryParse(linec, out lc);
                                                   var lci = (int)lc;


    <th class="linename  th-popup" title="@str.Remark" data-linecode="@lci">@str.LineName</th>
}
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                var evenRow = 0;
                                            }
                                            @foreach (var dmsCode in dmsCodes)
                                            {
                                                var currentRow = 0;
                                                var totalDmsMeasures = 0;
                                                evenRow ++;
                                                var data = Model.ListMeetingResultModel.Where(t => t.DmsCode == dmsCode);

                                                totalDmsMeasures = data.Count();
                                                if(totalDmsMeasures < 1) 
                                                {
                                                    totalDmsMeasures = 1;
                                                }
                                                foreach (var meetingResultModel in data)
                                                {
                                                    currentRow++;
                                                       if(evenRow%2 != 0 ){
                                                             <text><tr class="eventRow"></text>
                                                        }
                                                        else{
                                                             <text><tr>
</text>
                                                        }

                                                       if (currentRow == 1)
                                                       {
                                                        <text>
                                                            <td rowspan="@totalDmsMeasures" class="dms-code-col depart-DMS" data="dms-code">@_dmsService.GetDmsByDmsCode(dmsCode).Result.Description</td>
                                                        </text>
                                                       }
                                                       switch (meetingResultModel.MeasureType)
                                                       {
                                                           case "Null":
                                                            <text>
                                                                <td data="MeasureMeasureType" class="measure-type-col"></td></text>
                                                               break;
                                                           case "IPorOP":
                                                        <text>
                                                            <td data="MeasureMeasureType" class="measure-type-col">IP/OP</td></text>
                                                               break;
                                                           default:
                                                        <text>
                                                            <td data="MeasureMeasureType" class="measure-type-col">@meetingResultModel.MeasureType</td></text>
                                                               break;
                                                       }
                                                    <text>
                                                        <td data="MeasureName">@meetingResultModel.MeasureName</td>
                                                        <td data="Owner" class="owner-col">@meetingResultModel.Owner</td>
                                                        <td data="Target" class="target-col">@meetingResultModel.Target</td>
                                                        <td data="Unit" class="unit-col">@meetingResultModel.Unit</td>
                                                    </text>
                                                    if (meetingResultModel.DmsCode != DmsCode.DeedmacOperation.ToString())
                                                    {
                                                        
                                                    
                                                        foreach (var str in listResults)
                                                        {
                                                            var lineValue = meetingResultModel.ListResult.Single(s => s.LineCode == str.LineCode);
                                                            DmsCode dmsc;
                                                            Enum.TryParse(dmsCode, out dmsc);
                                                            var dmsci = (int)dmsc;

                                                            var measurec = meetingResultModel.MeasureCode;
                                                            NoisMainMeasureType mc;
                                                            Enum.TryParse(measurec, out mc);
                                                            var mci = (int)mc;

                                                            var linec = str.LineCode.Replace("(", "").Replace(")", "");
                                                            LineHardCodeType lc;
                                                            Enum.TryParse(linec, out lc);
                                                            var lci = (int)lc;
                                                            <td class="line-editable @_report.checkColorPacking(meetingResultModel.Target, lineValue.Result) line-check-edit " data-mscode="@mci-@lci" data-linename="@str.LineName" title="">
                                                                <div class="line-edit-span">@lineValue.Result</div>
                                                                <input value="@lineValue.Result" required type="text" class="hide line-edit-value" data-dmscode="@dmsci" data-measurecode="@mci" data-linecode="@lci" data-target="@meetingResultModel.Target" />
                                                            </td>
                                                        }
                                                    }
                                                    else
                                                    {

                                                        var measurec = meetingResultModel.MeasureCode;
                                                        NoisMainMeasureType mc;
                                                        Enum.TryParse(measurec, out mc);
                                                        var mci = (int)mc;
                                                        var lineValue = meetingResultModel.ListResult.Single(s => s.LineCode == LineHardCodeType.DeedmacOperation.ToString());

                                                        <td class="line-editable not-fitter line-check-edit exception-target" colspan="@listLineName.Count" data-mscode="@((int) DmsCode.DeedmacOperation)" data-linename="@(LineHardCodeType.DeedmacOperation.ToString())" title="">
                                                            <div class="line-edit-span">@lineValue.Result</div>
                                                            <input value="@lineValue.Result" required type="text" class="hide line-edit-value" data-dmscode="@((int) DmsCode.DeedmacOperation)" data-measurecode="@mci" data-linecode="@((int)LineHardCodeType.DeedmacOperation)" data-target="@meetingResultModel.Target" />
                                                        </td>
                                                    }

                                                @:</tr>
                                                }
                                            }

                                        </tbody>
                                    </table>
                                    <div id="bottom_anchor"></div>
                                </div>
                            </div>
                            <!-- /Result -->
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}
else
{
    <div>
        Opp! Admin didn’t assign any line for you so that you can update information.Please contact admin for it!
    </div>
}

@section bottomjs{

    <script src="@Url.Content("~/Scripts/kendo/2014.1.318/kendo.web.min.js")"></script>
    <script>
       
        var currentDate;
        $(document).ready(function() {
            function getURLParameter(name) {
                return decodeURIComponent(
                    (location.search.match(RegExp("[?|&]" + name + '=(.+?)(&|$)')) || [, null])[1]
                );
            }

            var date = getURLParameter('date');
            if (date != "null") {
                currentDate = date;
                $("#datepicker").val(date);
            } else {
                $("#datepicker").val($.datepicker.formatDate('mm/dd/yy', new Date()));
                currentDate = $.datepicker.formatDate('mm/dd/yy', new Date());

            }

           

            $(".datepicker-fullscreen").kendoDatePicker({
                origin: "top right",
                position: "bottom right",
                change: function () {
                    window.location.href = "/Making/Index?date=" +
                    kendo.toString(this.value(), 'd');
                }

            });
            $("#nav-meeting").addClass("active");
            $(".meeting-making").addClass("active");
            //data for drpLine
            var allLineAttributes = [
                @for (int i = 0; i < listLineName.Count; i++)
                {

                    <text>
    {
        Id: "@listLineName[i]",
        Name: "@listLineName[i]"
    }
                </text>
                    if (i != listLineName.Count - 1)
                    {
                        <text>,</text>
                    }
                }
            ];
            // dropdownlist drpLine
            $("#drpLine").kendoDropDownList({
                dataTextField: "Name",
                dataValueField: "Id",
                dataSource: allLineAttributes,
                index: 0,
                change: onChange,
                optionLabel: "--- Any Line ---",
            });

            function onChange() {
                var th = $("#tabresult").find(".table").find(".linename");
                var td = $("#tabresult").find(".table").find(".line-editable"); // find all td with class .line-edittable
                var selectedvalue = $("#drpLine").val(); // get select value dopdownlist line
                if (selectedvalue == "") { // if select first value
                    $(td).show();
                    $(th).show();
                } else { // if select a line
                    $(td).hide(); // hide all td with class .line-edittable
                    $(th).hide();
                    for (var j = 0; j < th.length; j++) {
                        if ($(th[j]).html() == selectedvalue) {
                            $(th[j]).show(); // show td with line choosen
                        }
                    }
                    for (var i = 0; i < td.length; i++) {
                        if ($(td[i]).data('linename') == selectedvalue) {
                            $(td[i]).show(); // show td with line choosen
                        }
                    }
                }
                $(".not-fitter").removeClass("hide");
            };

            //end dropdownlist drpLine


            function moveScroll() {
                var scroll = $(window).scrollTop();
                var anchor_top = $(".table").offset().top;
                var anchor_bottom = $("#bottom_anchor").offset().top;
                if (scroll > anchor_top && scroll < anchor_bottom) {
                    clone_table = $("#clone");
                    if (clone_table.length == 0) {
                        clone_table = $(".table").clone();
                        clone_table.attr('id', 'clone');
                        clone_table.css({
                            position: 'fixed',
                            'pointer-events': 'none',
                            top: 0
                        });
                        clone_table.width($(".table").width());
                        $(".orange").append(clone_table);
                        $("#clone tbody").css({ visibility: 'collapse' });
                        $("#clone thead").css({ visibility: 'visible', 'pointer-events': 'auto' });
                    }
                } else {
                    $("#clone").remove();
                }
            }

            $(window).scroll(moveScroll);
            //set readonly datepicker
            $('#datepicker').prop('readonly', true);
        });
</script>


}
