@using Entities.Domain
@using Microsoft.Ajax.Utilities
@using Service.Common
@using Service.Departments
@using Service.Interface
@using Service.Users
@model Web.Models.Packing.MeetModel
@{
    ViewBag.Title = "Making Department DDS";
    Layout = "~/Views/Shared/_KendoUILayout.cshtml";
    var dmsCodes = Model.ListMeetingResultModel.Select(t => t.DmsCode).Distinct().ToList();
    var listResults = new List<Web.Models.Packing.LineResult>();
    var listLineName = new List<string>();
    foreach (var result in Model.ListMeetingResultModel.Select(t => t.ListResult))
    {
        listResults.AddRange(result);
        listLineName.AddRange(result.Select(lineResult => lineResult.LineName));
    }
    listResults = listResults.DistinctBy(x => x.LineCode).Where(p => p.LineCode != "DeedmacOperation").ToList();
    listLineName = listLineName.Where(p => p != "DeedmacOperation").Distinct().ToList();
    var _dmsService = DependencyResolver.Current.GetService<IDmsService>();
    var _report = DependencyResolver.Current.GetService<IReportService>();
   
}

@if (listResults.Count > 0)
{
    <div class="form-group">

        <div class="pull-right " style="padding-right:0; margin-bottom:5px">
            <input id="datepicker"  class="datepicker-fullscreen" style="width: 150px;" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <!-- BOX -->
            <div class="box border blue">
                <div class="box-title">
                    <h4><i class="fa fa-user"></i><span class="hidden-inline-mobile">  </span></h4>
                </div>
                <div class="box-body">


                    <div class="tabbable header-tabs">
                        <ul class="nav nav-tabs">
                            <li><a href="#tabattendance" data-toggle="tab"><i class="fa fa-dot-circle-o"></i> <span class="hidden-inline-mobile">Attendance</span></a></li>
                            <li><a href="#tabissue" data-toggle="tab"><i class="fa fa-edit"></i> <span class="hidden-inline-mobile">Issue daily</span></a></li>

                            <li class="active"><a href="#tabresult" data-toggle="tab"><i class="fa fa-question"></i> <span class="hidden-inline-mobile">Result daily </span></a></li>

                        </ul>
                        <div class="tab-content">
                            <!-- Result -->
                            <div class="tab-pane fade in active" id="tabresult">

                                 <div class="form-group">
                                    <div class="pull-right" style="margin-bottom: 5px">
                                       Line <input id="drpLine" value="" />
                                    </div>
                                </div>
                                <div class="box border orange">

                                    <table class="table">
                                        <thead>
                                            <tr>
                                               <th>DMS</th>
                                                <th>IP/OP</th>
                                                <th>Measure</th>
                                                <th>Owner</th>
                                                <th>Target</th>
                                                <th>Unit</th>
                                               @foreach (var str in listResults)
                                                {
                                                    var linec = str.LineCode.Replace("(", "").Replace(")", "");
                                                    LineHardCodeType lc;
                                                    Enum.TryParse(linec, out lc);
                                                    var lci = (int)lc;


                                                    <th class="linename  th-popup" title="@str.Remark" data-linecode="@lci">@str.LineName</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                var evenRow = 0;
                                            }
                                            @foreach (var dmsCode in dmsCodes)
                                            {
                                                var currentRow = 0;
                                                var totalDmsMeasures = 0;
                                                evenRow ++;
                                                var data = Model.ListMeetingResultModel.Where(t => t.DmsCode == dmsCode);

                                                totalDmsMeasures = data.Count();
                                                if(totalDmsMeasures < 1) 
                                                {
                                                    totalDmsMeasures = 1;
                                                }
                                                foreach (var meetingResultModel in data)
                                                {
                                                    currentRow++;
                                                       if(evenRow%2 != 0 ){
                                                             <text><tr class="eventRow"></text>
                                                        }
                                                        else{
                                                             <text><tr></text>
                                                        }

                                                         if (currentRow == 1)
                                                        {
                                                            <text>
                                                                  <td rowspan="@totalDmsMeasures" class="dms-code-col depart-DMS" data="dms-code">@_dmsService.GetDmsByDmsCode(dmsCode).Result.Description</td>
                                                            </text>
                                                        }
                                                        switch (meetingResultModel.MeasureType)
                                                        {
                                                            case "Null":
                                                                    <text><td data="MeasureMeasureType" class="measure-type-col"></td></text>
                                                                break;
                                                            case "IPorOP":
                                                                        <text><td data="MeasureMeasureType" class="measure-type-col">IP/OP</td></text>
                                                                break;
                                                            default:
                                                                <text><td data="MeasureMeasureType" class="measure-type-col">@meetingResultModel.MeasureType</td></text>
                                                                break;
                                                        }
            
                                                        <text>
                                                            <td data="MeasureName" >@meetingResultModel.MeasureName</td>
                                                            <td data="Owner" class="owner-col">@meetingResultModel.Owner</td>
                                                            <td data="Target" class="target-col">@meetingResultModel.Target</td>
                                                            <td data="Unit" class="unit-col">@meetingResultModel.Unit</td>
                                                        </text>

                                                       if (meetingResultModel.DmsCode != DmsCode.DeedmacOperation.ToString())
                                                    {
                                                        
                                                    
                                                        foreach (var str in listResults)
                                                        {
                                                            var lineValue = meetingResultModel.ListResult.Single(s => s.LineCode == str.LineCode);
                                                            DmsCode dmsc;
                                                            Enum.TryParse(dmsCode, out dmsc);
                                                            var dmsci = (int)dmsc;

                                                            var measurec = meetingResultModel.MeasureCode;
                                                            NoisMainMeasureType mc;
                                                            Enum.TryParse(measurec, out mc);
                                                            var mci = (int)mc;

                                                            var linec = str.LineCode.Replace("(", "").Replace(")", "");
                                                            LineHardCodeType lc;
                                                            Enum.TryParse(linec, out lc);
                                                            var lci = (int)lc;
                                                            <td class="line-editable @_report.checkColorPacking(meetingResultModel.Target, lineValue.Result) line-check-edit " data-mscode="@mci-@lci" data-linename="@str.LineName" title="">
                                                                <div class="line-edit-span">@lineValue.Result</div>
                                                                <input value="@lineValue.Result" required type="text" class="hide line-edit-value" data-dmscode="@dmsci" data-measurecode="@mci" data-linecode="@lci" data-target="@meetingResultModel.Target" />
                                                            </td>
                                                        }
                                                    }
                                                       else
                                                       {

                                                           var measurec = meetingResultModel.MeasureCode;
                                                           NoisMainMeasureType mc;
                                                           Enum.TryParse(measurec, out mc);
                                                           var mci = (int)mc;
                                                           var lineValue = meetingResultModel.ListResult.Single(s => s.LineCode == LineHardCodeType.DeedmacOperation.ToString());

                                                        <td class="line-editable not-fitter line-check-edit exception-target" colspan="@listLineName.Count" data-mscode="@((int) DmsCode.DeedmacOperation)" data-linename="@(LineHardCodeType.DeedmacOperation.ToString())" title="">
                                                            <div class="line-edit-span">@lineValue.Result</div>
                                                            <input value="@lineValue.Result" required type="text" class="hide line-edit-value" data-dmscode="@((int) DmsCode.DeedmacOperation)" data-measurecode="@mci" data-linecode="@((int)LineHardCodeType.DeedmacOperation)" data-target="@meetingResultModel.Target" />
                                                        </td>
                                                       }

                                                @:</tr>
                                                }
                                            }

                                        </tbody>
                                    </table>
                                    <div id="bottom_anchor"></div>
                                </div>
                            </div>
                            <!-- /Result -->
                            <!-- Issue -->
                            <div class="tab-pane fade" id="tabissue">

                                <div id="issuegrid"></div>
                            </div>
                            <!-- /Issue -->
                            <!-- Attendance -->
                            <div class="tab-pane fade" id="tabattendance">

                                @if (Model.AttendanceModel != null)
                                {
                                    <table>
                                        <tr>
                                            <td>
                                                User Created :
                                            </td>
                                            <td>
                                                <span>@Model.AttendanceModel.UserCreated</span>
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>
                                                Meeting date:
                                            </td>
                                            <td>
                                                @Html.DisplayTextFor(p => p.AttendanceModel.CreatedDate)

                                            </td>
                                        </tr>
                                       
                                        <tr>
                                            <td>
                                                Attendance users:
                                            </td>
                                            <td>
                                                @String.Join(",", Model.AttendanceModel.ListUsernameInAttendance);

                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                Absent users:
                                            </td>
                                            <td>
                                                @String.Join(",", Model.AttendanceModel.ListUsernameNotInAttendance);

                                            </td>
                                        </tr>
                                        
                                    </table>
                                }
                                else
                                {
                                    <span>There's no meeting in this day</span>
                                }
                            </div>
                            <!-- /Attendance -->
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}
else
{
    <div>
        Opp! Admin didn’t assign any line for you so that you can update information.Please contact admin for it!
    </div>
}

@section bottomjs{

    <script src="@Url.Content("~/Scripts/kendo/2014.1.318/kendo.web.min.js")"></script>
    <script>
        var IsEditting = false;
        var oldval = 0;
        var currentDate;
        $(document).ready(function() {
            function getURLParameter(name) {
                return decodeURIComponent(
                    (location.search.match(RegExp("[?|&]" + name + '=(.+?)(&|$)')) || [, null])[1]
                );
            }

            var date = getURLParameter('date');
            if (date != "null") {
                currentDate = date;
                $("#datepicker").val(date);
            } else {
                $("#datepicker").val($.datepicker.formatDate('mm/dd/yy', new Date()));
                currentDate = $.datepicker.formatDate('mm/dd/yy', new Date());

            }
            //data for drpLine
            var allLineAttributes = [
                @for (int i = 0; i < listLineName.Count; i++)
            {

                <text>
    {
        Id: "@listLineName[i]",
        Name: "@listLineName[i]"
    }
                </text>
                if (i != listLineName.Count - 1)
                {
                    <text>,</text>
                }
            }
        ];
            // dropdownlist drpLine
            $("#drpLine").kendoDropDownList({
                dataTextField: "Name",
                dataValueField: "Id",
                dataSource: allLineAttributes,
                index: 0,
                change: onChange,
                optionLabel: "--- Any Line ---",
            });

            function onChange() {
                var th = $("#tabresult").find(".table").find(".linename");
                var td = $("#tabresult").find(".table").find(".line-editable");// find all td with class .line-edittable
                var selectedvalue = $("#drpLine").val(); // get select value dopdownlist line
                if (selectedvalue == "") { // if select first value
                    $(td).show();
                    $(th).show();
                } else {// if select a line
                    $(td).hide();// hide all td with class .line-edittable
                    $(th).hide();
                    for (var j = 0; j < th.length; j++) {
                        if ($(th[j]).html() == selectedvalue) {
                            $(th[j]).show(); // show td with line choosen
                        }
                    }
                    for (var i = 0; i < td.length; i++) {
                        if ($(td[i]).data('linename') == selectedvalue) {
                            $(td[i]).show(); // show td with line choosen
                        }
                    }
                }
                $(".not-fitter").removeClass("hide");
            };
            //end dropdownlist drpLine


            
            $(".datepicker-fullscreen").kendoDatePicker({
                origin: "top right",
                position: "bottom right",
                change: function() {
                    window.location.href = "/Making/Index?date="+
                    kendo.toString(this.value(), 'd');
                }

            });

            function moveScroll() {
                var scroll = $(window).scrollTop();
                var anchor_top = $(".table").offset().top;
                var anchor_bottom = $("#bottom_anchor").offset().top;
                if (scroll > anchor_top && scroll < anchor_bottom) {
                    clone_table = $("#clone");
                    if (clone_table.length == 0) {
                        clone_table = $(".table").clone();
                        clone_table.attr('id', 'clone');
                        clone_table.css({
                            position: 'fixed',
                            'pointer-events': 'none',
                            top: 0
                        });
                        clone_table.width($(".table").width());
                        $(".orange").append(clone_table);
                        $("#clone tbody").css({ visibility: 'collapse' });
                        $("#clone thead").css({ visibility: 'visible', 'pointer-events': 'auto' });
                    }
                } else {
                    $("#clone").remove();
                }
            }

            $(window).scroll(moveScroll);


            var alluserAttributes = [
                @{
                    var userService = DependencyResolver.Current.GetService<IUserService>();
                    var listUsername = userService.GetAllUsersAsync().ToList();
                }

                @for (int i = 0; i < listUsername.Count; i++)
                {
                    var type = listUsername[i];
                    <text>
    {
        Id: "@type.Id.ToString()",
        Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(type.Username)))"
    }
        </text>
                    if (i != listUsername.Count - 1)
                    {
                        <text>,</text>
                    }
                }
            ];


            var allStatusAttributes = [
                @{
                    var listType = new List<IssueStatus>()
                    {
                        IssueStatus.Open,
                        IssueStatus.Delayed,
                        IssueStatus.Closed
                    };
                }

                @for (int i = 0; i < listType.Count; i++)
                {
                    var type = listType[i];
                    <text>
            {
                Id: @((int) type),
                Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(type.ToString())))"
            }
                    </text>
                    if (i != listType.Count - 1)
                    {
                        <text>,</text>
                    }
                }
            ];

            function userDropDownEditor(container, options) {
                $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:UserAssignedId"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataSource: alluserAttributes
                    });
            }

            function additionalData() {
                return {
                    Datetime: currentDate,
                    Type: "@((int) IssueType.Making)"
                };
            }


            function display_kendoui_grid_error(e) {
                if (e.errors) {
                    if ((typeof e.errors) == 'string') {
                        //single error
                        //display the message
                        alert(e.errors);
                    } else {
                        //array of errors
                        var message = "The following errors have occurred:";
                        //create a message containing all errors.
                        $.each(e.errors, function(key, value) {
                            if (value.errors) {
                                message += "\n";
                                message += value.errors.join("\n");
                            }
                        });
                        //display the message
                        alert(message);
                    }
                } else {
                    alert('Error happened');
                }
            }

            var TypeIssue = '@((int) IssueType.Making)', a;

            function serialize(data) {
                data["date"] = currentDate;
                data["TypeId"] = TypeIssue;
                for (var property in data) {
                    if ($.isArray(data[property])) {
                        serializeArray(property, data[property], data);
                    }
                    if (data[property]==null) {
                        data[property] = " ";
                    }
                }
            }

            function serializeArray(prefix, array, result) {
                for (var i = 0; i < array.length; i++) {
                    if ($.isPlainObject(array[i])) {
                        for (var property in array[i]) {
                            result[prefix + "[" + i + "]." + property] = array[i][property];
                        }
                    } else {
                        result[prefix + "[" + i + "]"] = array[i];
                    }


                }
            }

            //load 
            function statusDropDownEditor(container, options) {
                $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:StatusId"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataSource: allStatusAttributes
                    });
            }

            var datasource = new kendo.data.DataSource({
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("List", "Issue"))",
                        type: "POST",
                        dataType: "json",
                        data: additionalData
                    },
                    destroy: {
                        url: "@Html.Raw(Url.Action("Delete", "Issue"))",
                        type: "POST",
                        dataType: "json"
                    },
                    create: {
                        url: "@Html.Raw(Url.Action("Create", "Issue"))",
                        type: "POST",
                        dataType: "json",
                        data: serialize
                    },
                    update: {
                        url: "@Html.Raw(Url.Action("Update", "Issue"))",
                        type: "POST",
                        dataType: "json",
                        data: serialize
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            CreatedDate: {
                                editable: false,
                            },
                            Content: {
                                editable: true,
                                validation:
                                {
                                    required: true,
                                    min: 1
                                }
                            },
                            NextStep: {
                                editable: true,

                                validation:
                                {
                                    required: true,
                                }
                            },

                            UserAssigned: {
                                editable: true,
                                type: "string",
                                validation:
                                {
                                    required: true,
                                }
                            },
                            TypeId: {
                                type: "string",

                            },
                            UserAssignedId: { editable: true, type: "string" },

                            Status: {
                                editable: true,
                                type: "string",
                                validation:
                                {
                                    required: true,
                                }
                            },
                            StatusId: { editable: true, type: "number" },
                            date: {
                                type: "string",
                            },
                            ActionPlan: {
                                editable: true,
                                type: "string",
                                validation:
                                {
                                    required: false,
                                }
                            },
                            When: {
                                editable: true,
                                type: "string",
                                validation:
                                {
                                    required: false,
                                }
                            },
                            Note: {
                                editable: true,
                                type: "string",
                                validation:
                                {
                                    required: false,
                                }
                            },
                            SystemFixDMSLinkage: {
                                editable: true,
                                type: "string",
                                validation:
                                {
                                    required: false,
                                }
                            }
                        }
                    }
                },
                requestEnd: function(e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                },
                error: function(e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },

                pageSize: 10,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            });


            $("#issuegrid").kendoGrid({
                dataSource: datasource,
                pageable: {
                    refresh: true,
                },
                height: 'auto',
                edit: function(e) {
                    if (e.model.Id == "") {
                        //little hack here
                        //pre-select the first value of kendoui dropdownlist datasource
                        //for some reasons (maybe, bug) it always sends 0
                        //if no value has been selected (changed) in the dropdownlist
                        if (alluserAttributes.length > 0) {
                            //e.model.MeasureTypeId = allMeasureTypeAttributes[0].Name;
                            e.model.UserAssignedId = alluserAttributes[0].Id;
                        }

                        if (allStatusAttributes.length > 0) {
                            e.model.StatusId = allStatusAttributes[0].Id;
                        }
                    }
                },
                editable: {
                    confirmation: true,
                    mode: "inline"
                },
                scrollable: false,
                toolbar: [],
                columns: [
                    
                    {
                        field: "Content",
                        title: "Issues",
                        width: 250,
                        template: "#=(Content == null) ? ' ' : Content #",
                       
                    },
                    {
                        field: "ActionPlan",
                        title: "Follow up action",
                        width: 250,
                        template: "#=(ActionPlan == null) ? ' ' : ActionPlan #",
                      
                    },
                    {
                        field: "UserAssignedId",
                        title: "Owner",
                        width: 150,
                        editor: userDropDownEditor,
                        template: "#:UserAssigned#"

                    }, {
                        field: "WhenDue",
                        title: "When",
                        width: 120, 
                        attributes: {
                            style:"text-align:center"
                        },
                        format: '{0:MM/dd/yyyy}',
                    },
                    {
                        field: "StatusId",
                        title: "Status",
                        width: 120,
                        editor: statusDropDownEditor,
                        template: "#:Status#"
                    },
                    {
                        field: "Note",
                        title: "Note",
                        width: 250,
                        template: "#=(Note == null) ? ' ' : Note #",
                     
                    },
                    {
                        field: "SystemFixDMSLinkage",
                        title: "System Fix <br/>DMS Linkage",
                        width: 250,
                        template: "#=(SystemFixDMSLinkage == null) ? ' ' : SystemFixDMSLinkage #"
                    },

                    {
                        field: "When",
                        title: "When",
                        width: 120,  
                        attributes: {
                            style:"text-align:center"
                        },
                        format: '{0:MM/dd/yyyy}',
                       
                    },
                    {
                        field: "CreatedDate",
                        title: "Create Date",
                width: 50,  
                attributes: {
                    style:"text-align:center"
                },
                        template: '#:CreatedDate#'
                    }
                ]
            }).on("click", ".k-grid-edit", function(){
                $(".k-grid-update").html("<span class='k-icon k-update'></span>").css("min-width","16px").removeClass("k-button-icontext");
                $(".k-grid-cancel").html("<span class='k-icon k-cancel'></span>").css("min-width","16px").removeClass("k-button-icontext");
            }).on("click", ".k-grid-add", function() {
                $(".k-grid-update").html("<span class='k-icon k-update'></span>").css("min-width","16px").removeClass("k-button-icontext");
                $(".k-grid-cancel").html("<span class='k-icon k-cancel'></span>").css("min-width","16px").removeClass("k-button-icontext");
            });

            $("#nav-meeting").addClass("active");
            $(".meeting-making").addClass("active");
            //set readonly date picker 
            $('.datepicker-fullscreen').prop('readonly', true);

        });
    </script>


}
